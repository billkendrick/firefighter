# ld65 Config File
# Documentation: https://cc65.github.io/doc/ld65.html

FEATURES {
    # STARTADDRESS is used to set the default value for the start address,
    # which can be referenced by the %S symbol. The builtin default for
    # the linker is $200.
    STARTADDRESS: default = $6000; ## FIXME
}

# The configuration file may also be used to define symbols used in
# the link stage or to force symbols imports. This is done in the SYMBOLS
# section. The symbol name is followed by a colon and symbol attributes.
#
# `export` means that the symbol is defined and exported from the linker config.
# `import` means that an import is generated for this symbol, eventually forcing
#   a module that exports this symbol to be included in the output.
# `weak` is similar as export. However, the symbol is only defined if it is not
#   defined elsewhere.
SYMBOLS {
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __STACKSIZE__:       type = weak, value = $0100;
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
    __SYSCHKHDR__:       type = export, value = 0; # Disable system check header
    __SYSCHKTRL__:       type = export, value = 0; # Disable system check trailer
}

# Memory areas are specified in a MEMORY section.
MEMORY {
    # Room for screen data and display list
    SCRMEMORY:  file = "", define = yes, start = $2000, size = $0400;

    # Character set (font) data.
    FONT1DATA:	file = %O, start = $2400, size = $0400, type = ro, fill = yes;
    FONT2DATA:	file = %O, start = $2800, size = $0400, type = ro, fill = yes;

    # Level data (it's compressed).
    LEVELSDATA: file = %O, start = $3200, size = $2E00, type = ro;

    # Zero page
    ZP:         file = "", define = yes, start = $0082, size = $007E;
# "system check" load chunk
    SYSCHKCHNK: file = %O,               start = $2E00, size = $0300;
    # "main program" load chunk
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
}


FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start,
           initad = SYSCHKCHNK: __SYSTEM_CHECK__;
}
SEGMENTS {
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro;
    DATA:      load = MAIN,       type = rw;
    INIT:      load = MAIN,       type = rw,                optional = yes;
    BSS:       load = MAIN,       type = bss, define = yes;
    SCRMEM:    load = SCRMEMORY,  type = rw, define = yes;
    FONT1:     load = FONT1DATA,  type = ro, define = yes;
    FONT2:     load = FONT2DATA,  type = ro, define = yes;
    LEVELS:    load = LEVELSDATA, type = ro, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
